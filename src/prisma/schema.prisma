generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  USER
  ADMIN

  @@map("roles")
}

enum UserApprovalStatus {
  PENDING
  APPROVED
  REJECTED

  @@map("user_approval_status")
}

enum VehicleType {
  CAR
  TRUCK
  MOTORCYCLE
  BUS

  @@map("vehicle_types")
}

enum SlotStatus {
  AVAILABLE
  OCCUPIED

  @@map("slot_status")
}

enum ParkingSessionStatus {
  ACTIVE
  COMPLETED

  @@map("parking_session_status")
}

enum PaymentStatus {
  PENDING
  COMPLETED

  @@map("payment_status")
}

model User {
  id                 String             @id @default(uuid())
  email              String             @unique
  names              String
  role               Role               @default(USER)
  phone              String             @unique
  userApprovalStatus UserApprovalStatus @default(PENDING)
  password           String
  createdAt          DateTime           @default(now())
  updatedAt          DateTime           @updatedAt
  Vehicle            Vehicle[]

  @@map("users")
}

model Vehicle {
  id             String           @id @default(uuid())
  userId         String
  vehicleType    VehicleType
  plateNumber    String           @unique
  model          String
  owner          User             @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  ParkingSlot    ParkingSlot?
  ParkingSession ParkingSession[]

  @@map("vehicles")
}

model ParkingSlot {
  id             String           @id @default(uuid())
  slotNumber     String           @unique
  slotStatus     SlotStatus       @default(AVAILABLE)
  vehicleId      String?          @unique
  vehicle        Vehicle?         @relation(fields: [vehicleId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  ParkingSession ParkingSession[]

  @@map("parking_slots")
}

model ParkingSession {
  id        String               @id @default(uuid())
  vehicleId String
  slotId    String
  entryTime DateTime             @default(now())
  exitTime  DateTime?
  status    ParkingSessionStatus @default(ACTIVE)
  slot      ParkingSlot          @relation(fields: [slotId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  vehicle   Vehicle              @relation(fields: [vehicleId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  createdAt DateTime             @default(now())
  updatedAt DateTime             @updatedAt
  Payment   Payment?

  @@map("parking_sessions")
}

model Payment {
  id        String         @id @default(uuid())
  sessionId String         @unique
  amount    BigInt?
  status    PaymentStatus  @default(PENDING)
  createdAt DateTime       @default(now())
  updatedAt DateTime       @updatedAt
  session   ParkingSession @relation(fields: [sessionId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@map("payments")
}
